<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://zyb024.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Feb 2020 12:30:21 +0800</lastBuildDate>
    
	<atom:link href="https://zyb024.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>编译原理笔记</title>
      <link>https://zyb024.github.io/post/blog2/</link>
      <pubDate>Fri, 21 Feb 2020 12:30:21 +0800</pubDate>
      
      <guid>https://zyb024.github.io/post/blog2/</guid>
      <description>用到编译原理技术的常见软件分类： 1、语言的结构化编辑器
2、语言程序的调试工具
3、程序格式化工具
4、程序的测试工具
测试工具分类： 静态分析器：对程序语法进行分析
动态测试器：根据不同测试用例对程序进行分析
5、高级语言之间的转换工具（一种高级语言转化成另一种高级语言）
6、嵌入式系统
7、并行编译
并行编译 并行程序设计途径 **1**、使用并行程序设计语言例如java编写并行程序 **2**、将串行程序并行化 常见并行编译环境 **1**、英特尔 **OpenMP** 允许编程人员通过编译器指令和**C/C++** 编译指令表达并行性。 **2**、**Hadoop** 是一个开源的可运行于大规模集群上的分布式并行编程框架 。 **3**、**MPI**（**Message** **Passing** **Interface**）并行程序设计，是一种消息传递编程模型。 程序分类 程序设计语言大致分为：机器语言、汇编语言、高级语言
源语言：高级语言/汇编语言
目标语言：汇编语言/机器
翻译程序： 将某一种语言（源语言）程序转换为与其逻辑上等价的另一种语言（目标语言）程序。
编译程序： 源语言为高级语言，目标语言为汇编语言或机器语言的翻译程序。
汇编程序： 源语言为汇编语言，目标语言为机器语言的翻译程序。
解释程序： 源语言程序作为输入，但不产生目标程序，而是边解释边执行源程序本身。
补充：.java文件是先编译成字节码文件（这个过程是编译过程），之后.class文件由Jvm解释成目标程序。
​ python一般认为是解释性语言，为了提高效率提供了一种编译方式，是先编译成python的字节码文件，之 后通过解释器解释成目标程序。
​ 解释语言例如：Basic、VF、LISP、Prolog。
编译程序结构 词法分析 从左到右一个字符一个字符的读入源程序，对构成源程序的字符串进行扫描和分解，从而识别出 一个个单词（也称单词符号或简称符号）。类似于外文翻译英文的对逐个单词进行翻译的过程。
语法分析 语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如“程序”，“语句”，“表达式”等等.
语义分析 语义分析是在语法分析程序确定出语法短语后，审查有无语义错误，并为代码生成阶段收集类型信息。
语义分析的重要工作之一是进行语义检查，并为代码生成收集类型信息(类型检查、变量是否声明、类
型是否一致、变量是否已有值等)。5/0、空指针等我觉得就是在语义分析阶段
中间代码生成 完成语法分析和语义处理工作后，编译程序将源程序变成一种内部表示形式，这种内部表示形式叫做中间
语言或称中间代码，它是一种结构简单、含义明确的记号系统。[将程序用四元式、三元式表述出来生成中间代码。]
四元式的形式为：
(运算符，运算对象1，运算对象2，结果）
代码优化 可以对产生的中间代码进行变换或进行改造，这就是代码的优化
代码生成 编译器生成的目标程序代码形式： **1**、汇编语言形式 **2**、可重定位二进制代码形式 **3**、内存形式：编译器生成的代码序列直接被装入原编译器所在的位置并被立即执行，也就是编译后马上运行。 符号表 在符号表中，程序源代码中的每个标识符都和它的声明或使用信息绑定在一起，比如其数据类型、作用域以及内存地址。
错误检测 错误检测处理与符号表管理工作一样，贯穿整个编译过程。</description>
    </item>
    
    <item>
      <title>android基础控件的使用</title>
      <link>https://zyb024.github.io/post/blog/</link>
      <pubDate>Fri, 21 Feb 2020 12:01:00 +0800</pubDate>
      
      <guid>https://zyb024.github.io/post/blog/</guid>
      <description>控件在屏幕上位置的确定 通常情况下控件在屏幕上确定至少要连接两条线（一条水平，一条垂直） 如下图连接了四条线 辅助线 辅助线的调出： 水平辅助线：进入activity.xml的设计模式之后如下图 为了尽量满足不同屏幕的适配，在做ui的时候应当多使用辅助线，将辅助线调整到屏幕的百分比模式 tips:控件的线可以连接在辅助线上 如果要一个控件处于一条辅助线的中间可以将控件的上下两条线连在一条辅助线上 TextView 普通文本的载体 效果图： plain Text效果图：左右各空出距离连线边界32dp hint可以设置出现的提示（请输入数字） Button 效果图： checkbox 复选框（可以选择多个） 效果图： 复选框水平对齐技巧： 1、同时选中多个复选框 2、对齐 3、串联起来 4、只需要连接其中一个，其它的自动对齐，以为是串联的 switch ImageView 放图片的容器 tips:调整图片大小 如果是做图标的可以调成80dp之后修改比例 调整比例： 一直点击出现左上角斜线 点击斜线： radioGroup radioGroup常和radioButton结合使用可以实现一个单选的效果 默认打对勾：ProgressBar 手机app加载的过渡动画 ： ： 将indeterminate设为true就会无限水平滚动 不将indeterminate设为true可以通过输入框和按钮实现进度的设置例如： SeekBar 类似于进度条可以自由滑动 这种SeekBar有设定好的滑动位置只能滑动到之前设定好的位置 ratingBar 类似于外卖的评分： Demo MainActivity.java
package com.zyb.uidemo; import androidx.appcompat.app.AppCompatActivity; import android.os.Bundle; import android.text.TextUtils; import android.view.View; import android.widget.Button; import android.widget.CheckBox; import android.widget.CompoundButton; import android.widget.EditText; import android.widget.ImageView; import android.widget.ProgressBar; import android.</description>
    </item>
    
  </channel>
</rss>